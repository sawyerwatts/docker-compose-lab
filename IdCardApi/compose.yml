# NOTE: ${COMPOSE_PROJECT_NAME} can be used to configure the name of the project. The top-level name
#   key does similar things. The default is the compose.yml's containing directory.

# NOTE: a .env in the working dir will be ready, and env vars can be used here in syntax ${VAR}.
#   Also, this file could def stand to make better use of vars, but it's fine.

services:

  # https://hub.docker.com/_/postgres/
  eligdb:
    image: postgres
    restart: always
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - eligdb_data:/var/lib/postgresql/data/
      - ./compose/eligdb/:/docker-entrypoint-initdb.d/
    networks:
      - shared_network
    environment:
      POSTGRES_DB: eligdb
      POSTGRES_USER: sawyer
      POSTGRES_PASSWORD: pizza

  # https://www.pgadmin.org/docs/pgadmin4/9.3/container_deployment.html
  # TODO: It'd be slick to auto-sign in and auto-register the eligdb server
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - eligdb
    ports:
      - "127.0.0.1:5050:80"
    networks:
      - shared_network
    environment:
      PGADMIN_DEFAULT_EMAIL: sawyer@fake.com
      PGADMIN_DEFAULT_PASSWORD: pizza

  # You'll need to set <InvariantGlobalization> to false in csproj since Linux or set env var
  # DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false for .NET
  plandb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: always
    ports:
      - "127.0.0.1:1433:1433"
    volumes:
      - plandb_data:/var/opt/mssql/
    networks:
      - shared_network
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: Pizza1234!@#$

  # In a more realistic dev env, you'll probably want to use a migrator tool, but this works for
  # Sawyer's local playground, and it's a decent example of initializing a container (although it's
  # always worth considering if an initialization container would be more appropriate).
  reset_plandb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      - plandb
    # This networking mode will allow this container to access plandb on localhost.
    network_mode: service:plandb
    volumes:
      - ./compose/:/setup/
    working_dir: /setup
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: Pizza1234!@#$
    command: [ "./reset-mssql-db.sh", "plandb" ]

  # https://mcr.microsoft.com/en-us/artifact/mar/azure-storage/azurite/about
  # https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&bc=%2Fazure%2Fstorage%2Fblobs%2Fbreadcrumb%2Ftoc.json&tabs=visual-studio%2Cblob-storage
  # https://github.com/Azure/Azurite
  # Default account name: devstoreaccount1
  # Default account key: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
  # Default connection string for all Azurite services: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
  # Default connection string for Azurite blob service: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;
  # Default connection string for Azurite queue service: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;
  # Default connection string for Azurite table service: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
  # The docs (above) have info on using https connection strings.
  # To create more accounts, create env var AZURITE_ACCOUNTS with value "account1:key1;account2:key1:key2"
  #     (where the keys are base 64 encoded). Note that this will disable the default account.
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    restart: always
    ports:
      # Azure Storage Explorer doesn't play nice with ipv6, so localhost is used.
      - "127.0.0.1:10000:10000"
      - "127.0.0.1:10001:10001"
      - "127.0.0.1:10002:10002"
    volumes:
      - azurite_data:/data/
    networks:
      - shared_network

  # https://mcr.microsoft.com/en-us/artifact/mar/azure-cli/about
  # https://learn.microsoft.com/en-us/cli/azure/get-started-with-azure-cli?view=azure-cli-latest
  # https://learn.microsoft.com/en-us/cli/azure/?view=azure-cli-latest
  reset_azurite_container_id_card:
    image: mcr.microsoft.com/azure-cli
    depends_on:
      - azurite
    network_mode: service:azurite
    volumes:
      - ./compose/:/setup/
    working_dir: /setup
    environment:
      AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;
    command: [ "./reset-azurite-container.sh", "id-card" ]

  # TODO: redis? https://hub.docker.com/_/redis

  # TODO: how pull actual (DB) image when debugging?

volumes:
  eligdb_data:
  plandb_data:
  azurite_data:

networks:
  shared_network:
