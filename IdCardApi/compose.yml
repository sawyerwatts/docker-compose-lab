# NOTE: ${COMPOSE_PROJECT_NAME} can be used to configure the name of the project. The top-level name
#   key does similar things. The default is the compose.yml's containing directory.

# NOTE: a .env in the working dir will be ready, and env vars can be used here in syntax ${VAR}

services:

  psql:
    image: postgres
    restart: always
    ports:
      - "[::1]:5432:5432"
    volumes:
      - psql_data:/var/lib/postgresql/data
    networks:
      - network
    environment:
      POSTGRES_USER: sawyer
      POSTGRES_PASSWORD: pizza
      POSTGRES_DB: eligdb

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "[::1]:5050:80"
    networks:
      - network
    environment:
      PGADMIN_DEFAULT_EMAIL: sawyer@fake.com
      PGADMIN_DEFAULT_PASSWORD: pizza

  # TODO: db migration container, if I'm feeling spicy

  # NOTE: If you want to run a script after a service starts up, use `depends_on`, make
  # `working_dir: /setup`, make a volume to map the script location inside the container, and use
  # a `command` or `entrypoint` that executes the script. To access `localhost` of another service,
  # use `network_mode: service:MY_SVC` to run within the same area as MY_SVC.
  # That said, consider if it would be better to make an image that contains the setup.

volumes:
  psql_data:

networks:
  network:
