# NOTE: ${COMPOSE_PROJECT_NAME} can be used to configure the name of the project. The top-level name
#   key does similar things. The default is the compose.yml's containing directory.

# NOTE: a .env in the working dir will be ready, and env vars can be used here in syntax ${VAR}

services:

  # https://hub.docker.com/_/postgres/
  eligdb:
    image: postgres
    restart: always
    ports:
      - "[::1]:5432:5432"
    volumes:
      - eligdb_data:/var/lib/postgresql/data/
      - ./dev/eligdb/:/docker-entrypoint-initdb.d/
    networks:
      - network
    environment:
      POSTGRES_DB: eligdb
      POSTGRES_USER: sawyer
      POSTGRES_PASSWORD: pizza

  # https://www.pgadmin.org/docs/pgadmin4/9.3/container_deployment.html
  # TODO: It'd be slick to auto-sign in and auto-register the eligdb server
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - eligdb
    ports:
      - "[::1]:5050:80"
    networks:
      - network
    environment:
      PGADMIN_DEFAULT_EMAIL: sawyer@fake.com
      PGADMIN_DEFAULT_PASSWORD: pizza

  # You'll need to set <InvariantGlobalization> to false in csproj since Linux or set env var
  # DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false for .NET
  plandb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "[::1]:1433:1433"
    volumes:
      - plandb_data:/var/opt/mssql/
    networks:
      - network
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: Pizza1234!@#$

  # TODO: make a reset service to seed plandb
  #   beginning of docs: https://learn.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver16&tabs=cli&pivots=cs1-bash#connect-to-sql-server

  # TODO: redis?

  # TODO: azurite?

  # TODO: how pull actual DB image when debugging?

  # NOTE: If you want to run a script after a service starts up, use `depends_on`, make
  # `working_dir: /setup`, make a volume to map the script location inside the container, and use
  # a `command` or `entrypoint` that executes the script. To access `localhost` of another service,
  # use `network_mode: service:MY_SVC` to run within the same area as MY_SVC.
  # That said, consider if it would be better to make an image that contains the setup.

volumes:
  eligdb_data:
  plandb_data:

networks:
  network:
